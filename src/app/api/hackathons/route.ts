import {
  createHackathon,
  getAllHackathons,
} from "@/lib/controllers/hackathonController";
import { connectToDatabase } from "@/lib/mongoose";
import { NextRequest, NextResponse } from "next/server";

export async function GET() {
  console.log("üì• GET /api/hackathons - D√©but de la requ√™te");
  try {
    console.log("üîå Connexion √† la base de donn√©es...");
    await connectToDatabase();
    console.log("‚úÖ Connexion DB r√©ussie, r√©cup√©ration des hackathons...");

    const hackathons = await getAllHackathons();
    console.log(`‚úÖ ${hackathons.length} hackathons r√©cup√©r√©s avec succ√®s`);

    return NextResponse.json(hackathons, { status: 200 });
  } catch (err: unknown) {
    console.error("‚ùå Erreur GET /api/hackathons:", err);
    const msg = err instanceof Error ? err.message : "Erreur inconnue";

    // Log plus d√©taill√© pour le d√©bogage
    if (err instanceof Error) {
      console.error("Message d'erreur:", err.message);
      console.error("Stack trace:", err.stack);
    }

    return NextResponse.json({ error: msg }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  await connectToDatabase();
  try {
    const data = await request.json();
    console.log(
      "POST /api/hackathons - Donn√©es re√ßues:",
      JSON.stringify(data, null, 2)
    );

    // Validation simple
    if (!data.nom) {
      console.log("Validation √©chou√©e: nom absent");
      return NextResponse.json(
        { error: "Le nom du hackathon est requis" },
        { status: 400 }
      );
    }

    // V√©rification des dates
    if (!data.dates || !data.dates.debut || !data.dates.fin) {
      console.log("Validation √©chou√©e: dates incompl√®tes");
      return NextResponse.json(
        { error: "Les dates de d√©but et de fin sont requises" },
        { status: 400 }
      );
    }

    const result = await createHackathon(data);
    console.log("Hackathon cr√©√© avec succ√®s, id:", result._id);
    return NextResponse.json(result, { status: 201 });
  } catch (err: unknown) {
    console.error("Erreur lors de la cr√©ation du hackathon:", err);
    const msg = err instanceof Error ? err.message : "Erreur inconnue";
    return NextResponse.json({ error: msg }, { status: 500 });
  }
}
