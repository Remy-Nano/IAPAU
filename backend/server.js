import express from 'express';
import cors from 'cors';
import mongoose from 'mongoose';
import dotenv from 'dotenv';

// Charge les variables d'environnement depuis le fichier .env
dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

// Connexion Ã  MongoDB Atlas (sans les options dÃ©prÃ©ciÃ©es)
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('Connexion Ã  MongoDB rÃ©ussie ğŸš€'))
  .catch(err => console.error('Erreur de connexion Ã  MongoDB :', err));

// CrÃ©ation du schÃ©ma Mongoose pour les mÃ©triques
const metricSchema = new mongoose.Schema({
  promptStartTime: Date,
  promptEndTime: Date,
  responseStartTime: Date,
  responseEndTime: Date
});

// ModÃ¨le pour les mÃ©triques
const Metric = mongoose.model('Metric', metricSchema);

// Route POST pour enregistrer une nouvelle mÃ©trique
app.post('/metrics', async (req, res) => {
  try {
    const metricData = {
      promptStartTime: new Date(req.body.promptStartTime),
      promptEndTime: new Date(req.body.promptEndTime),
      responseStartTime: new Date(req.body.responseStartTime),
      responseEndTime: new Date(req.body.responseEndTime),
    };

    const metric = new Metric(metricData);
    await metric.save();

    console.log('Nouvelle mÃ©trique enregistrÃ©e :', metric);
    res.json({ success: true, metric });
  } catch (error) {
    console.error('Erreur lors de l\'enregistrement de la mÃ©trique :', error);
    res.status(500).json({ success: false, message: error.message });
  }
});

// Route GET pour rÃ©cupÃ©rer toutes les mÃ©triques
app.get('/metrics', async (req, res) => {
  try {
    const metrics = await Metric.find();
    res.json(metrics);
  } catch (error) {
    console.error('Erreur lors de la rÃ©cupÃ©ration des mÃ©triques :', error);
    res.status(500).json({ success: false, message: error.message });
  }
});

// Ã‰coute sur le port dÃ©fini
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Serveur mÃ©triques en Ã©coute sur le port ${PORT} ğŸš€`);
});
